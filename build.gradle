buildscript {
	ext {
		springBootVersion = '2.0.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
	implementation('org.springframework.boot:spring-boot-starter-data-rest')
	implementation('org.springframework.boot:spring-boot-starter-web')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

//Create an installReact task
task initReact(type: GradleBuild) {
	tasks = ['npmInstall', 'npmInstallBootstrap']
}

configure(initReact) {
	group = "build setup"
	description = "Install dependencies for the React project"
}

task npmInstall(type: Exec) {
	workingDir './frontend'
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'npm', 'install'
	} else {
		commandLine 'npm', 'install'
	}
}

task npmInstallBootstrap(type: Exec) {
	workingDir './frontend'
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'npm', 'install', '--save', 'react-bootstrap', 'bootstrap@3'
	} else {
		commandLine 'npm', 'npm', 'install', '--save', 'react-bootstrap', 'bootstrap@3'
	}
}

//Create a buildReact task and make build depend on it
//Also create necessary "sub" tasks buildReactNPM, buildReactDelete, and buildReactCopy
task buildReact(type: GradleBuild) {
	tasks = ['buildReactNPM', 'buildReactDelete', 'buildReactCopy']
}

configure(buildReact) {
	group = "build"
	description = "Build the React app and move the results to /src/main/resources/static/"
}

task buildReactNPM(type:Exec) {
	workingDir './frontend'
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'npm', 'run', 'build'
	} else {
		commandLine 'npm', 'run', 'build'
	}
}

task buildReactDelete(type: Delete) {
	delete "src/main/resources/static"
}

task buildReactCopy(type:Copy) {
	from "frontend/build"
	into "src/main/resources/static"
}

build.dependsOn buildReact
buildReact.dependsOn buildReactCopy
buildReactCopy.dependsOn buildReactDelete
buildReactDelete.dependsOn buildReactNPM

